# Define parameters
configfile: "config.yaml"

# Top-level rule to encompass the entire workflow
rule all:
    input:
        config["rule_visualize_material_vectors"]["output_path"],
        config["rule_generate_element_concentration_plot"]["output"],
        config["rule_plot_current_density"]["output_path"],
        config["rule_plot_stacked_step_histogram"]["output_path"],
        config["rule_plot_Ag_Pd_Ru_dataset_elements"]["output_path"],
        config["rule_plot_ternary_datasets_current"]["output_path"],
        config["rule_plot_Ag_Pd_Pt_dataset_elements"]["output_path"],
        config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["output_path"],
        config["rule_plot_quaternary_current_with_predictions"]["output_path"],
        config["rule_plot_correlation"]["output_file"]

rule visualize_material_vectors:
    input:
        model=config["rule_visualize_material_vectors"]["model_path"]
    output:
        plot=config["rule_visualize_material_vectors"]["output_path"]
    log:
        "logs/visualize_material_vectors.log"
    params:
        # Quote each material to ensure they're treated as single arguments
        material_list=" ".join('"{}"'.format(item) for item in config["rule_visualize_material_vectors"]["material_list"]),
        # Quote each property to ensure multi-word properties are passed correctly
        property_list=" ".join('"{}"'.format(item) for item in config["rule_visualize_material_vectors"]["property_list"]),
        marker_size=config["rule_visualize_material_vectors"]["marker_size"],
        axisfont_size=config["rule_visualize_material_vectors"]["axisfont_size"],
        tickfont_size=config["rule_visualize_material_vectors"]["tickfont_size"],
        width=config["rule_visualize_material_vectors"]["width"],
        height=config["rule_visualize_material_vectors"]["height"],
        textfont_size=config["rule_visualize_material_vectors"]["textfont_size"],
        show_legend=config["rule_visualize_material_vectors"]["show_legend"],
    shell:
        """
        python script/visualize_materials.py \
            --model_path "{input.model}" \
            --output_path "{output.plot}" \
            --material_list {params.material_list} \
            --property_list {params.property_list} \
            --marker_size {params.marker_size} \
            --axisfont_size {params.axisfont_size} \
            --tickfont_size {params.tickfont_size} \
            --width {params.width} \
            --height {params.height} \
            --textfont_size {params.textfont_size} \
            --show_legend {params.show_legend} > {log} 2>&1
        """

# Snakefile for generating an element concentration plot
rule generate_element_concentration_plot:
    input:
        data1=config["rule_generate_element_concentration_plot"]["data1"],
        data2=config["rule_generate_element_concentration_plot"]["data2"],
        data3=config["rule_generate_element_concentration_plot"]["data3"]
    output:
        plot=config["rule_generate_element_concentration_plot"]["output"]
    log:
        "logs/generate_element_concentration_plot.log"
    shell:
        """
        python script/generate_element_concentration_plot.py \
            --data1 "{input.data1}" \
            --data2 "{input.data2}" \
            --data3 "{input.data3}" \
            --output "{output.plot}" > {log} 2>&1
        """

# Snakefile for plotting current density at 850mV
rule plot_current_density:
    input:
        data_paths=config["rule_plot_current_density"]["data_paths"]
    output:
        plot=config["rule_plot_current_density"]["output_path"]
    log:
        "logs/plot_current_density.log"
    params:
        system_names=" ".join(config["rule_plot_current_density"]["system_names"])
    shell:
        """
        python script/plot_current_density.py \
            --data_paths {input.data_paths} \
            --system_names {params.system_names} \
            --output_path {output.plot} > {log} 2>&1
        """

# Snakefile for plotting stacked step histogram
rule plot_stacked_step_histogram:
    input:
        data_paths=config["rule_plot_stacked_step_histogram"]["data_paths"]
    output:
        plot=config["rule_plot_stacked_step_histogram"]["output_path"]
    log:
        "logs/plot_stacked_step_histogram.log"
    params:
        system_names=" ".join(config["rule_plot_stacked_step_histogram"]["system_names"]),
        bins=config["rule_plot_stacked_step_histogram"]["bins"],
        column_name=config["rule_plot_stacked_step_histogram"]["column_name"]
    shell:
        """
        python script/plot_stacked_step_histogram.py \
            --data_paths {input.data_paths} \
            --system_names {params.system_names} \
            --output_path {output.plot} \
            --bins {params.bins} \
            --column_name {params.column_name} > {log} 2>&1
        """

# Snakefile for plotting similarity scatter figures

# Rule for generating "Ag-Pd-Ru_dataset_elements.pdf"
rule plot_Ag_Pd_Ru_dataset_elements:
    input:
        data_paths=config["rule_plot_Ag_Pd_Ru_dataset_elements"]["data_paths"]
    output:
        plot=config["rule_plot_Ag_Pd_Ru_dataset_elements"]["output_path"]
    log:
        "logs/plot_Ag_Pd_Ru_dataset_elements.log"
    params:
        elements=" ".join(config["rule_plot_Ag_Pd_Ru_dataset_elements"]["elements"]),
        x_labels=" ".join(config["rule_plot_Ag_Pd_Ru_dataset_elements"]["x_labels"]),
        y_labels=" ".join(config["rule_plot_Ag_Pd_Ru_dataset_elements"]["y_labels"]),
        ncols=config["rule_plot_Ag_Pd_Ru_dataset_elements"]["ncols"],
        nrows=config["rule_plot_Ag_Pd_Ru_dataset_elements"]["nrows"],
        subplot_labels=config["rule_plot_Ag_Pd_Ru_dataset_elements"]["subplot_labels"]
    shell:
        """
        python script/plot_similarity_scatter.py \
            --data_paths {input.data_paths} \
            --elements {params.elements} \
            --x_labels {params.x_labels} \
            --y_labels {params.y_labels} \
            --output_path {output.plot} \
            --ncols {params.ncols} \
            --nrows {params.nrows} \
            --subplot_labels {params.subplot_labels} > {log} 2>&1
        """

# Rule for generating "ternary_datasets_current.pdf"
rule plot_ternary_datasets_current:
    input:
        data_paths=config["rule_plot_ternary_datasets_current"]["data_paths"]
    output:
        plot=config["rule_plot_ternary_datasets_current"]["output_path"]
    log:
        "logs/plot_ternary_datasets_current.log"
    params:
        elements=" ".join(config["rule_plot_ternary_datasets_current"]["elements"]),
        x_labels=" ".join(config["rule_plot_ternary_datasets_current"]["x_labels"]),
        y_labels=" ".join(config["rule_plot_ternary_datasets_current"]["y_labels"]),
        legend_labels="'{}'".format(config["rule_plot_ternary_datasets_current"]["legend_labels"]),
        cmap_groups="'{}'".format(config["rule_plot_ternary_datasets_current"]["cmap_groups"]),
        ncols=config["rule_plot_ternary_datasets_current"]["ncols"],
        nrows=config["rule_plot_ternary_datasets_current"]["nrows"],
        subplot_labels=config["rule_plot_ternary_datasets_current"]["subplot_labels"]
    shell:
        """
        python script/plot_similarity_scatter.py \
            --data_paths {input.data_paths} \
            --elements {params.elements} \
            --x_labels {params.x_labels} \
            --y_labels {params.y_labels} \
            --legend_labels {params.legend_labels} \
            --cmap_groups {params.cmap_groups} \
            --output_path {output.plot} \
            --ncols {params.ncols} \
            --nrows {params.nrows} \
            --subplot_labels {params.subplot_labels} > {log} 2>&1
        """

# Rule for generating "Ag-Pd-Pt_dataset_elements.pdf"
rule plot_Ag_Pd_Pt_dataset_elements:
    input:
        data_paths=config["rule_plot_Ag_Pd_Pt_dataset_elements"]["data_paths"]
    output:
        plot=config["rule_plot_Ag_Pd_Pt_dataset_elements"]["output_path"]
    log:
        "logs/plot_Ag_Pd_Pt_dataset_elements.log"
    params:
        elements=" ".join(config["rule_plot_Ag_Pd_Pt_dataset_elements"]["elements"]),
        x_labels=" ".join(config["rule_plot_Ag_Pd_Pt_dataset_elements"]["x_labels"]),
        y_labels=" ".join(config["rule_plot_Ag_Pd_Pt_dataset_elements"]["y_labels"]),
        ncols=config["rule_plot_Ag_Pd_Pt_dataset_elements"]["ncols"],
        nrows=config["rule_plot_Ag_Pd_Pt_dataset_elements"]["nrows"],
        subplot_labels=config["rule_plot_Ag_Pd_Pt_dataset_elements"]["subplot_labels"]
    shell:
        """
        python script/plot_similarity_scatter.py \
            --data_paths {input.data_paths} \
            --elements {params.elements} \
            --x_labels {params.x_labels} \
            --y_labels {params.y_labels} \
            --output_path {output.plot} \
            --ncols {params.ncols} \
            --nrows {params.nrows} \
            --subplot_labels {params.subplot_labels} > {log} 2>&1
        """

# Rule for generating "Ag-Pd-Pt-Ru_dataset_elements.pdf"
rule plot_Ag_Pd_Pt_Ru_dataset_elements:
    input:
        data_paths=config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["data_paths"]
    output:
        plot=config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["output_path"]
    log:
        "logs/plot_Ag_Pd_Pt_Ru_dataset_elements.log"
    params:
        elements=" ".join(config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["elements"]),
        x_labels=" ".join(config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["x_labels"]),
        y_labels=" ".join(config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["y_labels"]),
        ncols=config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["ncols"],
        nrows=config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["nrows"],
        subplot_labels=config["rule_plot_Ag_Pd_Pt_Ru_dataset_elements"]["subplot_labels"]
    shell:
        """
        python script/plot_similarity_scatter.py \
            --data_paths {input.data_paths} \
            --elements {params.elements} \
            --x_labels {params.x_labels} \
            --y_labels {params.y_labels} \
            --output_path {output.plot} \
            --ncols {params.ncols} \
            --nrows {params.nrows} \
            --subplot_labels {params.subplot_labels} > {log} 2>&1
        """

rule plot_quaternary_current_with_predictions:
    input:
        data_paths=config["rule_plot_quaternary_current_with_predictions"]["data_paths"]
    output:
        plot=config["rule_plot_quaternary_current_with_predictions"]["output_path"]
    log:
        "logs/plot_quaternary_current_with_predictions.log"
    params:
        elements=" ".join(config["rule_plot_quaternary_current_with_predictions"]["elements"]),
        x_labels=" ".join(config["rule_plot_quaternary_current_with_predictions"]["x_labels"]),
        y_labels=" ".join(config["rule_plot_quaternary_current_with_predictions"]["y_labels"]),
        legend_labels="'{}'".format(config["rule_plot_quaternary_current_with_predictions"]["legend_labels"]),
        cmap_groups="'{}'".format(config["rule_plot_quaternary_current_with_predictions"]["cmap_groups"]),
        ncols=config["rule_plot_quaternary_current_with_predictions"]["ncols"],
        nrows=config["rule_plot_quaternary_current_with_predictions"]["nrows"],
        subplot_labels=config["rule_plot_quaternary_current_with_predictions"]["subplot_labels"]
    shell:
        """
        python script/plot_similarity_scatter.py \
            --data_paths {input.data_paths} \
            --elements {params.elements} \
            --x_labels {params.x_labels} \
            --y_labels {params.y_labels} \
            --legend_labels {params.legend_labels} \
            --cmap_groups {params.cmap_groups} \
            --output_path {output.plot} \
            --ncols {params.ncols} \
            --nrows {params.nrows} \
            --subplot_labels {params.subplot_labels} > {log} 2>&1
        """


# Rule for plotting correlation with optional filtering and fit line

rule plot_correlation:
    input:
        data_paths=config["rule_plot_correlation"]["data_paths"]
    output:
        output_file=config["rule_plot_correlation"]["output_file"]
    log:
        "logs/plot_correlation.log"
    params:
        names=config["rule_plot_correlation"]["names"],
        x_col=config["rule_plot_correlation"]["x_col"],
        y_col=config["rule_plot_correlation"]["y_col"],
        combined=config["rule_plot_correlation"]["combined"],
        show_fit_line=config["rule_plot_correlation"]["show_fit_line"],
        filter=config["rule_plot_correlation"]["filter"]
    shell:
        """
        python script/plot_correlation.py \
            --data_paths {input.data_paths} \
            --names {params.names} \
            --x_col {params.x_col} \
            --y_col {params.y_col} \
            --combined {params.combined} \
            --show_fit_line {params.show_fit_line} \
            --filter "{params.filter}" \
            --output_file {output.output_file} > {log} 2>&1
        """


# Rule to load data, initialize class, and plot the results
rule integrated_density_plot:
    input:
        filepaths=config["rule_integrated_density_plot"]["filepaths"]  # List of CSV file paths
    output:
        pdf=config["rule_integrated_density_plot"]["output_file"]  # Output PDF file
    log:
        "logs/integrated_density_plot.log"  # Log file for integrated_density_plot rule
    params:
        columns=config["rule_integrated_density_plot"]["columns"],  # List of column names for color-coding
        plot_types=config["rule_integrated_density_plot"]["plot_types"],  # List of plot types
        legend_labels=config["rule_integrated_density_plot"]["legend_labels"],  # Custom legend labels
        fontsize=config["rule_integrated_density_plot"]["fontsize"],  # Font size
        subplot_width=config["rule_integrated_density_plot"]["subplot_width"],  # Width of subplots
        subplot_height=config["rule_integrated_density_plot"]["subplot_height"]  # Height of subplots
    shell:
        """
        python script/integrated_density_plot.py \
            --filepaths {input.filepaths} \
            --columns {params.columns} \
            --plot_types {params.plot_types} \
            --legend_labels {params.legend_labels} \
            --fontsize {params.fontsize} \
            --subplot_width {params.subplot_width} \
            --subplot_height {params.subplot_height} \
            --output {output.pdf} > {log} 2>&1
        """